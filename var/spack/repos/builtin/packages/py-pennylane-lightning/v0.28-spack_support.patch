diff --git a/CMakeLists.txt b/CMakeLists.txt
index dbc3d77..21aa319 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -86,5 +86,5 @@ target_link_libraries(pennylane_lightning INTERFACE     lightning_utils
                                                         lightning_algorithms
                                                         lightning_gates
 )
-target_include_directories(pennylane_lightning INTERFACE "pennylane_lightning/src")
+target_include_directories(pennylane_lightning  INTERFACE "$<INSTALL_INTERFACE:${PROJECT_SOURCE_DIR}/pennylane_lightning/src;include>")
 
@@ -108,4 +108,10 @@ install(TARGETS pennylane_lightning
         LIBRARY DESTINATION lib
         ARCHIVE DESTINATION lib
         INCLUDES DESTINATION include
+        PUBLIC_HEADER DESTINATION include
+)
+
+install(DIRECTORY
+    ${PROJECT_SOURCE_DIR}/pennylane_lightning/src
+    DESTINATION include/pennylane_lightning
 )
diff --git a/Makefile b/Makefile
index 305b59e..9d3a2a3 100644
--- a/Makefile
+++ b/Makefile
@@ -79,31 +79,31 @@ coverage-cpp:
 	rm -rf ./BuildCov
 	cmake pennylane_lightning/src -BBuildCov  -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON
 	cmake --build ./BuildCov
-	cd ./BuildCov; ./tests/runner; \
+	cd ./BuildCov; ./tests/pennylane_lightning_test_runner; \
 	lcov --directory . -b ../pennylane_lightning/src --capture --output-file coverage.info; \
 	genhtml coverage.info --output-directory out
 
 test-cpp:
 	rm -rf ./BuildTests
 	cmake $(LIGHTNING_CPP_DIR) -BBuildTests -DBUILD_TESTS=ON
-	cmake --build ./BuildTests --target runner
+	cmake --build ./BuildTests --target pennylane_lightning_test_runner
 	cmake --build ./BuildTests --target test
 
 test-cpp-blas:
 	rm -rf ./BuildTests
 	cmake $(LIGHTNING_CPP_DIR) -BBuildTests -DBUILD_TESTS=ON -DENABLE_BLAS=ON
-	cmake --build ./BuildTests --target runner
+	cmake --build ./BuildTests --target pennylane_lightning_test_runner
 	cmake --build ./BuildTests --target test
 
 test-cpp-no-omp:
 	rm -rf ./BuildTests
 	cmake $(LIGHTNING_CPP_DIR) -BBuildTests -DBUILD_TESTS=ON -DENABLE_OPENMP=OFF
-	cmake --build ./BuildTests --target runner
+	cmake --build ./BuildTests --target pennylane_lightning_test_runner
 	cmake --build ./BuildTests --target test
 
 test-cpp-kokkos:
 	rm -rf ./BuildTests
 	cmake $(LIGHTNING_CPP_DIR) -BBuildTests -DBUILD_TESTS=ON -DENABLE_KOKKOS=ON
-	cmake --build ./BuildTests --target runner
+	cmake --build ./BuildTests --target pennylane_lightning_test_runner
 	cmake --build ./BuildTests --target test
 
diff --git a/pennylane_lightning/src/algorithms/CMakeLists.txt b/pennylane_lightning/src/algorithms/CMakeLists.txt
index 50e315a..3bfcbe4 100644
--- a/pennylane_lightning/src/algorithms/CMakeLists.txt
+++ b/pennylane_lightning/src/algorithms/CMakeLists.txt
@@ -3,7 +3,7 @@ project(lightning_algorithms LANGUAGES CXX)
 set(ALGORITHM_FILES AdjointDiff.cpp JacobianTape.cpp StateVecAdjDiff.cpp CACHE INTERNAL "" FORCE)
 add_library(lightning_algorithms STATIC ${ALGORITHM_FILES})
 
-target_link_libraries(lightning_algorithms PRIVATE lightning_compile_options
+target_link_libraries(lightning_algorithms PUBLIC lightning_compile_options
                                                    lightning_external_libs
                                                    lightning_gates
                                                    lightning_simulator
diff --git a/pennylane_lightning/src/benchmarks/Bench_LinearAlgebra.cpp b/pennylane_lightning/src/benchmarks/Bench_LinearAlgebra.cpp
index e77559c..3cde10d 100644
--- a/pennylane_lightning/src/benchmarks/Bench_LinearAlgebra.cpp
+++ b/pennylane_lightning/src/benchmarks/Bench_LinearAlgebra.cpp
@@ -111,7 +111,9 @@ template <class T> static void omp_innerProd_cmplx(benchmark::State &state) {
 
     for (auto _ : state) {
         std::complex<T> res(.0, .0);
+        // Create indirection to avoid GCC issue with AVX512 compilation
+        std::complex<T> *res_ptr = &res;
 
-        Util::omp_innerProd(vec1.data(), vec2.data(), res, sz);
-        benchmark::DoNotOptimize(res);
+        Util::omp_innerProd(vec1.data(), vec2.data(), *res_ptr, sz);
+        benchmark::DoNotOptimize(res_ptr);
     }
@@ -147,12 +149,14 @@ template <class T> static void blas_innerProd_cmplx(benchmark::State &state) {
 
     for (auto _ : state) {
         std::complex<T> res(.0, .0);
+        // Create indirection to avoid GCC issue with AVX512 compilation
+        std::complex<T> *res_ptr = &res;
 
         if constexpr (std::is_same_v<T, float>) {
-            cblas_cdotc_sub(sz, vec1.data(), 1, vec2.data(), 1, &res);
+            cblas_cdotc_sub(sz, vec1.data(), 1, vec2.data(), 1, res_ptr);
         } else if constexpr (std::is_same_v<T, double>) {
-            cblas_zdotc_sub(sz, vec1.data(), 1, vec2.data(), 1, &res);
+            cblas_zdotc_sub(sz, vec1.data(), 1, vec2.data(), 1, res_ptr);
         }
 
-        benchmark::DoNotOptimize(res);
+        benchmark::DoNotOptimize(res_ptr);
     }
@@ -528,5 +532,6 @@ template <class T> static void blas_scaleAndAdd_cmplx(benchmark::State &state) {
 
     std::vector<std::complex<T>> vec1;
     std::vector<std::complex<T>> vec2;
-    std::complex<T> scale{std::cos(0.4123), std::sin(0.4123)};
+    std::complex<T> scale{std::cos(static_cast<T>(0.4123)),
+                          std::sin(static_cast<T>(0.4123))};

diff --git a/pennylane_lightning/src/benchmarks/CMakeLists.txt b/pennylane_lightning/src/benchmarks/CMakeLists.txt
index 3ce0a98..e316f55 100644
--- a/pennylane_lightning/src/benchmarks/CMakeLists.txt
+++ b/pennylane_lightning/src/benchmarks/CMakeLists.txt
@@ -66,22 +66,22 @@ target_link_libraries(utils PRIVATE lightning_benchmarks_dependency
                                     benchmark::benchmark_main)
 
 ################################################################################
-# Add benchmark_apply_operations exe
+# Add pennylane_lightning_bench_operations exe
 ################################################################################
 
-add_executable(apply_operations Bench_ApplyOperations.cpp)
+add_executable(pennylane_lightning_bench_operations Bench_ApplyOperations.cpp)
 
-target_link_libraries(apply_operations PRIVATE lightning_benchmarks_dependency
+target_link_libraries(pennylane_lightning_bench_operations PRIVATE lightning_benchmarks_dependency
                                                benchmark::benchmark_main)
 
 ################################################################################
-# Add bench_kernels
+# Add pennylane_lightning_bench_kernels
 ################################################################################
 
-add_executable(bench_kernels Bench_Kernels.cpp)
-target_link_libraries(bench_kernels PRIVATE lightning_benchmarks_dependency
+add_executable(pennylane_lightning_bench_kernels Bench_Kernels.cpp)
+target_link_libraries(pennylane_lightning_bench_kernels PRIVATE lightning_benchmarks_dependency
                                             benchmark::benchmark)
 
 
-add_custom_command(TARGET bench_kernels POST_BUILD 
+add_custom_command(TARGET pennylane_lightning_bench_kernels POST_BUILD
                    COMMAND ${CMAKE_COMMAND} -E create_symlink
@@ -92,5 +92,5 @@ add_custom_command(TARGET bench_kernels POST_BUILD
                            ${PROJECT_BINARY_DIR}/plot_gate_benchmark.py
 )
 
-install(TARGETS bench_kernels apply_operations DESTINATION bin)
+install(TARGETS pennylane_lightning_bench_kernels pennylane_lightning_bench_operations DESTINATION bin)
 install(FILES 
diff --git a/pennylane_lightning/src/tests/CMakeLists.txt b/pennylane_lightning/src/tests/CMakeLists.txt
index b33b512..a46ebcf 100644
--- a/pennylane_lightning/src/tests/CMakeLists.txt
+++ b/pennylane_lightning/src/tests/CMakeLists.txt
@@ -94,14 +94,14 @@ set(TEST_SOURCES CreateAllWires.cpp
                  Test_StateVectorRawCPU.cpp
                  Test_Util.cpp)
 
-add_executable(runner ${TEST_SOURCES})
-target_link_libraries(runner PRIVATE lightning_tests_dependency
+add_executable(pennylane_lightning_test_runner ${TEST_SOURCES})
+target_link_libraries(pennylane_lightning_test_runner PRIVATE lightning_tests_dependency
                                      lightning_compile_options
                                      lightning_external_libs)
-catch_discover_tests(runner)
+catch_discover_tests(pennylane_lightning_test_runner)
 
 # We build compile time tests before the runtime tests as build error messages
 # are horrible if compile time constants are not well defined.
-add_dependencies(runner compile_time_tests)
+add_dependencies(pennylane_lightning_test_runner compile_time_tests)
 
-install(TARGETS runner DESTINATION bin)
\ No newline at end of file
+install(TARGETS pennylane_lightning_test_runner DESTINATION bin)
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 4a795fb..3bac27d 100644
--- a/setup.py
+++ b/setup.py
@@ -116,4 +116,2 @@ class CMakeBuild(build_ext):
 requirements = [
-    "ninja",
-    "numpy",
     "pennylane>=0.28",
 ]
